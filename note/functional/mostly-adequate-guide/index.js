/*
OOP：
关注：数据和行为
面向对象的应用程序大多是命令式的，
因此在很大程度上依赖于使用基于对象的封装来保护其自身和继承的可变状态的完整性，
再通过实例方法来暴露或修改这些状态。

缺点：
对象的数据与其具体的行为以一种内聚的包裹的形式耦合在一起。
OOP通常是通过调用对象方法来更改对象内部的状态，它无法保证检索状态的输出一致，并可能破坏部分的期望该对象保持不变的功能。


函数式：
分离数据和行为，更加专注于行为的组合，使得数据和行为是松耦合的。

核心：
声明式
抽象
流式
无副作用
不可变性
提纯


*/